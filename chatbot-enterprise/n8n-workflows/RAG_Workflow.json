{
  "nodes": [
    {
      "parameters": {},
      "id": "db7e50ff-f963-4682-a8d7-d00fff3bd052",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1,
      "position": [
        -700,
        320
      ],
      "notesInFlow": false,
      "credentials": {
        "postgres": {
          "id": "5LPqoPG4p0V8EFcd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"response\": {{$json?.output.toJsonString() }},\n  \"sessionId\": \"{{$('Edit Fields').item.json.sessionId}}\"\n}\n",
        "options": {}
      },
      "id": "ec8f4116-b80f-4267-9140-8e72017cdbe0",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -280,
        60
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9a9a245e-f1a1-4282-bb02-a81ffe629f0f",
              "name": "chatInput",
              "value": "={{ $json?.chatInput || $json.body.message }}",
              "type": "string"
            },
            {
              "id": "b80831d8-c653-4203-8706-adedfdb98f77",
              "name": "sessionId",
              "value": "={{ $json?.sessionId || $json.body.sessionId}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "832f1312-17e8-4b09-8577-530b61f2bb79",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -940,
        100
      ]
    },
    {
      "parameters": {
        "public": true,
        "options": {}
      },
      "id": "295099db-0fa0-4bfa-89d4-c16d9a19b5f4",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -1100,
        100
      ],
      "webhookId": "e104e40e-6134-4825-a6f0-8a646d882662"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "rag-chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "ed0b1cd1-33f4-4667-a030-dc53b04a6582",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1100,
        300
      ],
      "webhookId": "bf4dd093-bb02-472c-9454-7ab9af97bd1d"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatinput }}",
        "options": {
          "systemMessage": "=You are a personal assistant who helps answer questions from a corpus of documents. The documents are either text based (Txt, docs, extracted PDFs, etc.) or tabular data (CSVs or Excel documents).\n\nWhen searching for information, focus on these extracted keywords from the user's question:\n{{ $('Code').item.json.keywords.join(', ') }}\n\nThese key phrases may also be relevant:\n{{ $('Code').item.json.phrases.join(', ') }}\n\nYou are given tools to perform RAG in the 'document_chunks' table, look up the documents available in your knowledge base in the 'document' table, extract all the text from a given document, and query the tabular files with SQL in the 'document_rows' table.\n\nAlways start by performing RAG unless the question requires a SQL query for tabular data (fetching a sum, finding a max, something a RAG lookup would be unreliable for). If RAG doesn't help, then look at the documents that are available to you, find a few that you think would contain the answer, and then analyze those.\n\nAlways tell the user if you didn't find the answer. Don't make something up just to please them."
        }
      },
      "id": "f546ae46-290f-4ded-a965-4cb02620d617",
      "name": "RAG AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -600,
        100
      ]
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to fetch all available documents, including the table schema if the file is a CSV or Excel file.",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        -560,
        320
      ],
      "id": "ca146add-a9cd-4ff6-9369-ddfd4a8dc2ff",
      "name": "List Documents",
      "credentials": {
        "postgres": {
          "id": "5LPqoPG4p0V8EFcd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Given a documents ID, fetches the text from the document.",
        "operation": "executeQuery",
        "query": "SELECT \n    string_agg(content, ' ') as document_text\nFROM document_chunks\n  WHERE document_id = $1\nGROUP BY document_id;",
        "options": {
          "queryReplacement": "={{ $fromAI('document_id') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        -420,
        320
      ],
      "id": "72cfde60-750a-4c71-8129-94b576ee017a",
      "name": "Get File Contents",
      "credentials": {
        "postgres": {
          "id": "5LPqoPG4p0V8EFcd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Run a SQL query - use this to query from the document_rows table once you know the file ID you are querying. dataset_id is the document_id and you are always using the row_data for filtering, which is a jsonb field that has all the keys from the file schema given in the document_metadata table.\n\nExample query:\n\nSELECT AVG((row_data->>'revenue')::numeric)\nFROM document_rows\nWHERE dataset_id = '123';\n\nExample query 2:\n\nSELECT \n    row_data->>'category' as category,\n    SUM((row_data->>'sales')::numeric) as total_sales\nFROM dataset_rows\nWHERE dataset_id = '123'\nGROUP BY row_data->>'category';",
        "operation": "executeQuery",
        "query": "{{ $fromAI('sql_query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        -260,
        320
      ],
      "id": "03248fc4-af25-4485-83e9-bf4ae09cfd5b",
      "name": "Query Document Rows",
      "credentials": {
        "postgres": {
          "id": "5LPqoPG4p0V8EFcd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "documents",
        "toolDescription": "Use RAG to look up information in the knowledgebase.",
        "tableName": {
          "__rl": true,
          "value": "document_chunks",
          "mode": "list",
          "cachedResultName": "document_chunks"
        },
        "topK": 10,
        "options": {
          "queryName": "match_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        100,
        280
      ],
      "id": "7f7de476-5cbb-4949-a441-8c70cfd9febe",
      "name": "Supabase Vector Store1",
      "credentials": {
        "supabaseApi": {
          "id": "CAivPbO134UFXAZV",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -840,
        320
      ],
      "id": "3fb8ae83-c0e7-4ee6-9a19-842dd817b251",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "HqAQOWX6Nr9AAm3H",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/embedding-001"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        -40,
        340
      ],
      "id": "bbe9fcf9-4644-4b89-bc04-2a48fa6dd762",
      "name": "Embeddings Google Gemini",
      "credentials": {
        "googlePalmApi": {
          "id": "HqAQOWX6Nr9AAm3H",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get user input using the correct n8n structure\nconst userQuery = $input.first().json.chatInput || \"\";\n\n// Important: Preserve the session ID from the chat trigger\nconst sessionId = $input.first().json.sessionId || \n                 $input.first().json.conversationId || \n                 `session_${Date.now()}`;\n\n// Define stop words\nconst STOP_WORDS = new Set([\"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \n  \"you\", \"your\", \"yours\", \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \n  \"she\", \"her\", \"hers\", \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \n  \"theirs\", \"themselves\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \n  \"those\", \"am\", \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \n  \"had\", \"having\", \"do\", \"does\", \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \n  \"if\", \"or\", \"because\", \"as\", \"until\", \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \n  \"about\", \"against\", \"between\", \"into\", \"through\", \"during\", \"before\", \"after\", \n  \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \"in\", \"out\", \"on\", \"off\", \"over\", \n  \"under\", \"again\", \"further\", \"then\", \"once\", \"here\", \"there\", \"when\", \"where\", \n  \"why\", \"how\", \"all\", \"any\", \"both\", \"each\", \"few\", \"more\", \"most\", \"other\", \n  \"some\", \"such\", \"no\", \"nor\", \"not\", \"only\", \"own\", \"same\", \"so\", \"than\", \"too\", \n  \"very\", \"can\", \"will\", \"just\", \"don\", \"should\", \"now\"]);\n\n// Simple keyword extraction\nfunction extractSimpleKeywords(text) {\n  if (!text) return [];\n  \n  const normalized = text.toLowerCase()\n    .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \" \")\n    .replace(/\\s{2,}/g, \" \")\n    .trim();\n  \n  const words = normalized.split(\" \")\n    .filter(word => word.length > 2)\n    .filter(word => !STOP_WORDS.has(word));\n  \n  const freqMap = Object.create(null);\n  words.forEach(word => {\n    freqMap[word] = (freqMap[word] || 0) + 1;\n  });\n  \n  return Object.keys(freqMap)\n    .sort((a, b) => freqMap[b] - freqMap[a])\n    .slice(0, 6);\n}\n\n// Extract n-grams (phrases)\nfunction extractNgrams(text, n = 2) {\n  if (!text) return [];\n  \n  const normalized = text.toLowerCase()\n    .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \" \")\n    .replace(/\\s{2,}/g, \" \")\n    .trim();\n  \n  const words = normalized.split(\" \");\n  const ngrams = [];\n  \n  for (let i = 0; i <= words.length - n; i++) {\n    const ngram = words.slice(i, i + n).join(\" \");\n    if (!STOP_WORDS.has(words[i]) && !STOP_WORDS.has(words[i + n - 1])) {\n      ngrams.push(ngram);\n    }\n  }\n  \n  const freqMap = Object.create(null);\n  ngrams.forEach(ngram => {\n    freqMap[ngram] = (freqMap[ngram] || 0) + 1; \n  });\n  \n  return Object.keys(freqMap)\n    .sort((a, b) => freqMap[b] - freqMap[a])\n    .slice(0, 3);\n}\n\n// Extract keywords and phrases\nconst keywords = extractSimpleKeywords(userQuery);\nconst phrases = extractNgrams(userQuery);\n\n// Combine into enhanced query\nconst enhancedQuery = [...keywords, ...phrases].join(\" \");\n\n// Return enhanced data with session ID preserved\nreturn {\n  json: {\n    chatinput: userQuery,\n    keywords: keywords,\n    phrases: phrases,\n    enhancedQuery: enhancedQuery,\n    // Critical: Pass through the session ID\n    sessionId: sessionId,\n    searchQuery: userQuery ? \n      `Find information about: ${enhancedQuery}\\n\\nOriginal question: ${userQuery}` : \n      \"No query provided\"\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -780,
        100
      ],
      "id": "6c60c0e8-5b59-4bc2-9f0c-4be4fcc5ba8f",
      "name": "Code"
    },
    {
      "parameters": {
        "tableId": "chat_messages",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "session_id",
              "fieldValue": "={{ $('Edit Fields').item.json.sessionId }}"
            },
            {
              "fieldId": "role",
              "fieldValue": "assistant"
            },
            {
              "fieldId": "content",
              "fieldValue": "={{ $('RAG AI Agent').item.json.output }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -280,
        -120
      ],
      "id": "b01bdc17-e625-45b0-af53-ee8efc7891a7",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "CAivPbO134UFXAZV",
          "name": "Supabase account"
        }
      }
    }
  ],
  "connections": {
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        []
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RAG AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          },
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Documents": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get File Contents": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Query Document Rows": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store1": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "RAG AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2f9a676940fcfba0fc018f4ccba4b9b9a7ad04946c86aa72d40912f4039eb118"
  }
}